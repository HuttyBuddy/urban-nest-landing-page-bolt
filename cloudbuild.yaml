# cloudbuild.yaml
steps:
  # 1) Build container (Dockerfile in repo)
  - name: gcr.io/cloud-builders/docker
    args: ['build', '-t', 'us-west1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/urbannest-landing:${SHORT_SHA}', '.']

  # 2) Push to Artifact Registry (preferred over GCR)
  - name: gcr.io/cloud-builders/docker
    args: ['push', 'us-west1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/urbannest-landing:${SHORT_SHA}']

  # 3) Deploy to THE service your LB points at: urbannest-landing
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: bash
    args:
      - -c
      - |
        gcloud run deploy urbannest-landing \
          --image us-west1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/urbannest-landing:${SHORT_SHA} \
          --region us-west1 \
          --platform managed \
          --allow-unauthenticated \
          --project ${PROJECT_ID}

  # 4) Ensure CDN honors origin headers (idempotent; safe to run every build)
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: "CDN_USE_ORIGIN_HEADERS"
    entrypoint: bash
    args:
      - -c
      - |
        gcloud compute backend-services update urbannest-cr-backend \
          --global --enable-cdn --cache-mode=USE_ORIGIN_HEADERS \
          --project ${PROJECT_ID} || true

  # 5) Invalidate CDN so new index.html is fetched
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: "CDN_INVALIDATE"
    entrypoint: bash
    args:
      - -c
      - |
        gcloud compute url-maps invalidate-cdn-cache urban-nest-final-lb \
          --path=/index.html \
          --path=/ \
          --project ${PROJECT_ID} || true
  - us-west1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/urbannest-landing:${SHORT_SHA}

# Keep Cloud Logging only if you want
options:
  logging: CLOUD_LOGGING_ONLY

# Use your build runner SA (must have permissions for AR push, Cloud Run deploy, and Compute updates)
serviceAccount: 'cloud-build-runner@urban-nest-2.iam.gserviceaccount.com'
